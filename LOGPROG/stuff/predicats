my_length([], 0).
my_length([_|T], N):-
    my_length(T, TN), N is TN+1.

my_print_list([]).
my_print_list([H|T]):-
    write(H), write(' '), my_print_list(T).

my_member(E, [E|_]).
my_member(E,[_|T]):-
    my_member(E, T).

my_member_chk(E, L):-
    my_member(E, L), !.
    
my_append([], L, L).
my_append([H|T1], L, [H|T2]):-
    my_append(T1, L, T2).

my_insert(E, 0, L, [E|L]):-!.
my_insert(E, N, [H|T], [H|L]):-
    TN is N-1, my_insert(E, TN, T, L).

my_insert1(E, 0, L, LL):-
    my_append([E], L, LL).
my_insert1(E, N, [H|T], [H|L]):-
    TN is N-1, my_insert1(E, TN, T, L).

my_remove([E|L], E, L).
my_remove([H|T], E, [H|L]):-
    my_remove(T, E, L).

my_select(L1, E, L2):-
    my_remove(L1, E, L2).	

my_permute([], []).
my_permute([H1|T1], L):-
    my_permute(T1, L1), my_select(L, H1, L1).

my_compare([H|T1], [H|T2], R):-
    !, my_compare(T1, T2, R).
my_compare([], [], 1):-!.
my_compare(_, _, 0):-!.

my_first_negative([H|_], 0):-
    H<0, !.
my_first_negative([_|T], P):-
    my_first_negative(T, PP), P is PP+1.

my_prefix(L1, L2):-
    my_append(L1, _, L2).

my_sublist(L1, L2):-
	my_prefix(L1, L2).
my_sublist(L, [_|T]):-
    my_sublist(L, T). 
